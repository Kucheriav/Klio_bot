import telebot
from telebot import types # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
from db_functions import *
from users_states import User



API_TOKEN = "6428204535:AAHaYkp0ljreKLnOMQ7v1ib0WX7ZrawXu_o"
name_tg = '@hist_museum_bot'
bot = telebot.TeleBot(API_TOKEN)
session, _ = database_init()
ADMINS_IDS = get_admins_ids(session)
users_states = dict()


@bot.message_handler(content_types=['text'])
def work(message):
    if message.text == '/start':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("‚ùó–ú–æ—ë –∏–º—è")
        btn2 = types.KeyboardButton("üèõÔ∏è–û –º—É–∑–µ–µ")
        markup.add(btn1, btn2)
        btn3 = types.KeyboardButton("‚ÑπÔ∏è–í—ã—Å—Ç–∞–≤–∫–∏")
        btn4 = types.KeyboardButton("üî•–ù–∞—à –∞–∫—Ç–∏–≤")
        markup.add(btn3, btn4)
        btn_zap = types.KeyboardButton('‚ùì–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é –≤ –º—É–∑–µ–π?')
        markup.add(btn_zap)
        if message.from_user.id in ADMINS_IDS:
            admbtn = types.KeyboardButton("üíª–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            markup.add(admbtn)

        text = '–ü—Ä–∏–≤–µ—Ç! üëã –Ø - –ö–ª–∏–æ! –Ø –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –º—É–∑–µ—è —à–∫–æ–ª—ã ‚Ññ13.'
        bot.send_photo(message.chat.id, open('menu.jpg', 'rb'), caption=text)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é: üëá', reply_markup=markup)

    elif message.text == "‚ùó–ú–æ—ë –∏–º—è":
        bot.send_message(message.chat.id, "–ò–º—è –ö–ª–∏–æ —è –ø–æ–ª—É—á–∏–ª –≤ —á–µ—Å—Ç—å –º—É–∑—ã –∏—Å—Ç–æ—Ä–∏–∏ –≤ –¥—Ä–µ–≤–Ω–µ–≥—Ä–µ—á–µ—Å–∫–æ–π –º–∏—Ñ–æ–ª–æ–≥–∏–∏.")

    elif message.text == "üèõÔ∏è–û –º—É–∑–µ–µ":
        bot.send_message(message.chat.id,
                         "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π —à–∫–æ–ª—ã ‚Ññ13 —Å–æ–∑–¥–∞–Ω –≤ 2021 –≥–æ–¥—É. –ù–æ–º–µ—Ä —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ ‚Ä¶‚Ä¶ –ú—É–∑–µ–π –∏–º–µ–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –®–∫–æ–ª—å–Ω—ã—Ö –º—É–∑–µ–µ–≤. –ù–∞—à –º—É–∑–µ–π —Å–æ–≤—Å–µ–º –º–æ–ª–æ–¥–æ–π, –ø–æ—ç—Ç–æ–º—É –æ–∂–∏–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –æ–±–∑–æ—Ä–æ–≤ –∏  —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π - —ç—Ç–æ –ø—Ä–æ –Ω–∞—Å!")

    elif message.text == "üî•–ù–∞—à –∞–∫—Ç–∏–≤":
        bot.send_message(message.chat.id,
                         "–ù–∞—à –º—É–∑–µ–π–Ω—ã–π –∞–∫—Ç–∏–≤ - —É–≤–ª–µ—á–µ–Ω–Ω—ã–µ, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–±—è—Ç–∞! –ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å! –ë–µ–∫–µ—Ç–æ–≤–∞ –í–ª–∞–¥–∞, –ò–≤–∞—â–µ–Ω–∫–æ –õ–∏–∑–∞, –ú–æ—Å–∏–Ω–∞ –í–∏–∫–∞, –ö–æ–Ω–¥—Ä–∞—à–æ–≤ –ü–∞—à–∞, –ë–µ—Å—Å—É–¥–Ω–æ–≤ –ê—Ä—Ç—ë–º, –ö–æ—Ü–µ–±—É–∫ –ù–∞—Å—Ç—è, –°–∏–Ω–∏—Ü–∞ –õ–µ—Ä–∞, –ê—Ä—Å–µ–Ω–∏–π - —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥—ã –∏ –∞–∫—Ç–∏–≤–∏—Å—Ç—ã –º—É–∑–µ—è.")
    elif message.text == "‚ùì–ö–∞–∫ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é –≤ –º—É–∑–µ–π?":
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text="üìù–ó–∞–ø–∏—Å—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é", callback_data='excursion_info')
        keyboard.add(callback_button)
        bot.send_message(message.chat.id,
                         "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é –º–æ–∂–Ω–æ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ 301 –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º —ç—Ç–∞–∂–µ –∏–ª–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –∏ –ø–æ–¥–±–µ—Ä–µ–º —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è!",
                         reply_markup=keyboard)
    elif message.text == "üíª–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("‚ÑπÔ∏è–í–∏–¥—ã —ç–∫—Å–∫—É—Ä—Å–∏–π")
        btn2 = types.KeyboardButton("üìù–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
        markup.add(btn1, btn2)
        bot.send_message(message.chat.id, text='–ü—Ä–∏–≤–µ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!', reply_markup=markup)
    elif message.text == "‚ÑπÔ∏è–í–∏–¥—ã —ç–∫—Å–∫—É—Ä—Å–∏–π":
        keyboard = types.InlineKeyboardMarkup()
        excursions = get_all_excursions(session)
        for i, name in enumerate(excursions):
            callback_button = types.InlineKeyboardButton(text=name, callback_data=f'excursion_admin.{i}')
            keyboard.add(callback_button)
        bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∫–∑–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏: üëá",
                         reply_markup=keyboard)

    else:
        print(message.text)
        bot.send_message(message.chat.id, "–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        # –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ "–∑–∞–ø–∏—Å—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é" –≤—ã–≤–∞–ª–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏
        if call.data == 'excursion_info':
            users_states[call.message.chat.id] = User()
            windows_names = sorted(list(get_current_windows_names(session)))
            users_states[call.message.chat.id].actual_excursions = windows_names[:]
            keyboard = types.InlineKeyboardMarkup()
            for i, name in enumerate(windows_names):
                callback_button = types.InlineKeyboardButton(text=name, callback_data=f'excursion_choice.{i}')
                keyboard.add(callback_button)
            bot.send_message(call.message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏: üëá",
                             reply_markup=keyboard)
        # –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é –≤—ã–≤–∞–ª–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã
        elif call.data.startswith('excursion_choice'):
            excursion_choice = users_states[call.message.chat.id].actual_excursions[int(call.data.split('.')[1])]
            users_states[call.message.chat.id].excursion_choice = excursion_choice
            dates = sorted(list(get_actual_dates_by_name(session, excursion_choice)))
            users_states[call.message.chat.id].actual_dates = dates[:]
            keyboard = types.InlineKeyboardMarkup()
            for i, date in enumerate(dates):
                callback_button = types.InlineKeyboardButton(text=date.strftime("%d.%m.%Y"), callback_data=f'date_choice.{i}')
                keyboard.add(callback_button)
            text = ''
            text += excursion_choice + '\n'
            text += get_description_by_title(session, excursion_choice)+ '\n'
            text += "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞—Ç—ã: üëá"
            bot.send_message(call.message.chat.id, text,
                             reply_markup=keyboard)
        # –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ register_next_step_handler, —É—Ç–æ—á–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏
        elif call.data.startswith('date_choice'):
            date_choice = users_states[call.message.chat.id].actual_dates[int(call.data.split('.')[1])]
            users_states[call.message.chat.id].date_choice = date_choice
            text = '–ö–∞–∫ –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å? (—É–∫–∞–∂–∏—Ç–µ –∏–º—è)'
            bot.send_message(call.message.chat.id, text)
            bot.register_next_step_handler(call.message, how_many)



@bot.message_handler(content_types=['text'])
def how_many(message):
    users_states[message.chat.id].contact_name = message.text
    users_states[message.chat.id].contact_link = message.from_user.username
    text = "—Å–∫–æ–ª—å–∫–æ –≤–∞—Å?"
    bot.send_message(message.chat.id, text)
    bot.register_next_step_handler(message, confirm)


@bot.message_handler(content_types=['text'])
def confirm(message):
    number = message.text
    window_id = window_id_by_title_and_date(session, users_states[message.chat.id].excursion_choice,
                                            users_states[message.chat.id].date_choice)
    # –æ–∂–∏–¥–∞–µ–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: —Å–µ—Å—Å–∏—è –∏ [window_id, contact_link, contact_name,  number]
    result = add_visit(session, [window_id, users_states[message.chat.id].contact_link,
                                 users_states[message.chat.id].contact_name, number])

    bot.send_message(message.chat.id, text=result)


bot.infinity_polling()