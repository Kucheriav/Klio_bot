import telebot
from telebot import types # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
from typing import Dict
from db_functions import *
from users_states import UserCache
from keyboard_markups import my_markups
from db_config_reader import read_config
from datetime import datetime

API_TOKEN = read_config(filename='config.ini', section='api')['key']
name_tg = '@hist_museum_bot'
bot = telebot.TeleBot(API_TOKEN)
session, _ = database_init()
admins_dict = get_admins_ids_names_dict(session)
users_cache_dict: Dict[int, UserCache] = {}


@bot.message_handler(content_types=['text'])
def work(message):
    if message.text == '/start' and message.from_user.id in admins_dict:
        text = f'–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admins_dict[message.from_user.id]}! –ö–ª–∏–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—èüëã\n–ß—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ?'
        bot.send_photo(message.chat.id, open('menu.jpg', 'rb'), caption=text)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é: üëá', reply_markup=my_markups.get_admin_menu())

    elif message.text == '/start':
        text = '–ü—Ä–∏–≤–µ—Ç! üëã –Ø - –ö–ª–∏–æ! –Ø –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –º—É–∑–µ—è —à–∫–æ–ª—ã ‚Ññ13.'
        bot.send_photo(message.chat.id, open('menu.jpg', 'rb'), caption=text)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é: üëá', reply_markup=my_markups.get_user_menu())

    elif message.text == my_markups.about_museum_btn.text:
        text = ("–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π —à–∫–æ–ª—ã ‚Ññ13 —Å–æ–∑–¥–∞–Ω –≤ 2021 –≥–æ–¥—É. –ù–æ–º–µ—Ä —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞ ‚Ä¶‚Ä¶ "
                "–ú—É–∑–µ–π –∏–º–µ–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –®–∫–æ–ª—å–Ω—ã—Ö –º—É–∑–µ–µ–≤. "
                "–ù–∞—à –º—É–∑–µ–π —Å–æ–≤—Å–µ–º –º–æ–ª–æ–¥–æ–π, –ø–æ—ç—Ç–æ–º—É –æ–∂–∏–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤, "
                "–∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –æ–±–∑–æ—Ä–æ–≤ –∏  —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π - —ç—Ç–æ –ø—Ä–æ –Ω–∞—Å!")
        bot.send_message(message.chat.id, text)

    elif message.text == my_markups.about_bot_btn.text:
        text = "–ò–º—è –ö–ª–∏–æ —è –ø–æ–ª—É—á–∏–ª –≤ —á–µ—Å—Ç—å –º—É–∑—ã –∏—Å—Ç–æ—Ä–∏–∏ –≤ –¥—Ä–µ–≤–Ω–µ–≥—Ä–µ—á–µ—Å–∫–æ–π –º–∏—Ñ–æ–ª–æ–≥–∏–∏."
        bot.send_message(message.chat.id, text)

    elif message.text == my_markups.about_team_btn.text:
        text = ("–ù–∞—à –º—É–∑–µ–π–Ω—ã–π –∞–∫—Ç–∏–≤ - —É–≤–ª–µ—á–µ–Ω–Ω—ã–µ, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–±—è—Ç–∞! –ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å! –ë–µ–∫–µ—Ç–æ–≤–∞ –í–ª–∞–¥–∞, "
                "–ò–≤–∞—â–µ–Ω–∫–æ –õ–∏–∑–∞, –ú–æ—Å–∏–Ω–∞ –í–∏–∫–∞, –ö–æ–Ω–¥—Ä–∞—à–æ–≤ –ü–∞—à–∞, –ë–µ—Å—Å—É–¥–Ω–æ–≤ –ê—Ä—Ç—ë–º, –ö–æ—Ü–µ–±—É–∫ –ù–∞—Å—Ç—è, –°–∏–Ω–∏—Ü–∞ –õ–µ—Ä–∞, "
                "–ê—Ä—Å–µ–Ω–∏–π - —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥—ã –∏ –∞–∫—Ç–∏–≤–∏—Å—Ç—ã –º—É–∑–µ—è.")
        bot.send_message(message.chat.id, text)

    elif message.text == my_markups.about_excursions_btn.text:
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text="üìù–ó–∞–ø–∏—Å—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é", callback_data='excursion_info')
        keyboard.add(callback_button)
        text = ("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é –º–æ–∂–Ω–æ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ 301 –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º —ç—Ç–∞–∂–µ –∏–ª–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. "
                "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –∏ –ø–æ–¥–±–µ—Ä–µ–º —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è!")
        bot.send_message(message.chat.id, text=text, reply_markup=keyboard)

    elif message.text == my_markups.edit_excursion_btn.text:
        keyboard = types.InlineKeyboardMarkup()
        excursions = get_all_excursions(session)
        for i, excursion in enumerate(excursions):
            callback_button = types.InlineKeyboardButton(text=excursion.title, callback_data=f'excursion_admin.{excursion.id}')
            keyboard.add(callback_button)
        bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∫–∞–∑–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏: üëá",
                         reply_markup=keyboard)

    elif message.text == my_markups.edit_timetable_btn.text:
        keyboard = types.InlineKeyboardMarkup()
        windows = get_all_current_windows(session)
        for i, window in enumerate(windows):
            text = window.title + ' ' + window.date_time.strftime('%d.%m.%Y')
            if window.contact_link:
                text = '‚úÖ' + text
            else:
                text = '‚òëÔ∏è' + text
            callback_button = types.InlineKeyboardButton(text=text, callback_data=f'window_admin.{window.id}')
            keyboard.add(callback_button)
        bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∫–∞–∑–∞–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: üëá",
                         reply_markup=keyboard)

    else:
        bot.send_message(message.chat.id, "–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@bot.callback_query_handler(func=lambda call: 'admin' not in call.data)
def user_choosing_excursion_window(call):
    if call.data == 'excursion_info':
        excursion_ids_and_names = sorted(list(get_current_excursions_ids_and_names(session)), key=lambda x: x[1])
        keyboard = types.InlineKeyboardMarkup()
        for i, id_and_name in enumerate(excursion_ids_and_names):
            callback_button = types.InlineKeyboardButton(text=id_and_name[1],
                                                         callback_data=f'excursion_choice.{id_and_name[0]}')
            keyboard.add(callback_button)
        bot.edit_message_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏: üëá",
                              call.message.chat.id, call.message.id, reply_markup=keyboard)
    # –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é –≤—ã–≤–∞–ª–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã
    elif call.data.startswith('excursion_choice'):
        excursion_id = int(call.data.split('.')[1])
        excursion_info = get_excursion_info_by_id(session, excursion_id) # title, description, duration
        windows_ids_and_dates = [(x[0], x[1].strftime("%d.%m.%Y")) for x in
                                 sorted(get_windows_ids_and_dates_by_excursion_id(session, excursion_id),
                                        key=lambda x: x[1])]
        keyboard = types.InlineKeyboardMarkup()
        for i, window_id_and_date in enumerate(windows_ids_and_dates):
            callback_button = types.InlineKeyboardButton(text=window_id_and_date[1],
                                                         callback_data=f'date_choice.{window_id_and_date[0]}')
            keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —ç–∫—Å–∫—É—Ä—Å–∏–∏',
                                                     callback_data='excursion_info')
        keyboard.add(callback_button)
        text = ''
        text += excursion_info[0] + '\n'
        text += excursion_info[1] + '\n'
        text += '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ' + excursion_info[2] + '–º–∏–Ω.\n'
        text += "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞—Ç—ã: üëá"
        bot.edit_message_text(text, call.message.chat.id, call.message.id, reply_markup=keyboard)

    # –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ register_next_step_handler, —É—Ç–æ—á–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏
    elif call.data.startswith('date_choice'):
        users_cache_dict[call.message.chat.id] = UserCache(datetime.now())
        users_cache_dict[call.message.chat.id].window_id = int(call.data.split('.')[1])
        text = '–ö–∞–∫ –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å? (—É–∫–∞–∂–∏—Ç–µ –∏–º—è)'
        bot.send_message(call.message.chat.id, text)
        bot.register_next_step_handler(call.message, how_many)



@bot.message_handler(content_types=['text'])
def how_many(message):
    users_cache_dict[message.chat.id].contact_name = message.text
    users_cache_dict[message.chat.id].contact_link = message.from_user.username
    text = "–°–∫–æ–ª—å–∫–æ –≤–∞—Å?"
    bot.send_message(message.chat.id, text)
    bot.register_next_step_handler(message, confirm)


@bot.message_handler(content_types=['text'])
def confirm(message):
    info = [users_cache_dict[message.chat.id].window_id, users_cache_dict[message.chat.id].contact_link,
            users_cache_dict[message.chat.id].contact_name, message.text]
    # –æ–∂–∏–¥–∞–µ–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: —Å–µ—Å—Å–∏—è –∏ [window_id, contact_link, contact_name, umber]
    # –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–∫–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    result = add_visit_into_window(session, info)
    if result:
        text = (f'üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã, {result.contact_name}, —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã '
                f'–Ω–∞ {result.date_time.strftime("%d.%m.%Y")} –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é!.\n'
                f'–ú–æ—è –∫–æ–º–∞–Ω–¥–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
    else:
        text = '‚ùå–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É '
    bot.send_message(message.chat.id, text=text)


@bot.callback_query_handler(func=lambda call: 'admin' in call.data)
def admin_functions(call):
    if 'excursion_admin' in call.data:
        this_exscursion = get_all_excursion_info_by_id(session, int(call.data.split('.')[1]))
        text = f'–≠–∫—Å–∫—É—Ä—Å–∏—è'
        text += '–û–ø–∏—Å–∞–Ω–∏–µ'
        text += '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
        text += '–û–∫–Ω–∞'
        text += '–ó–∞—è–≤–∫–∏'
        excursion_id = call.data.split('.')[1]
        keyboard = types.InlineKeyboardMarkup()
        edit_excursion_btn = types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                                                        callback_data=f'edit_excursion.{excursion_id}')
        add_window_btn = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –æ–∫–Ω–æ',
                                                    callback_data=f'add_window.{excursion_id}')
        del_window_btn = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –æ–∫–Ω–æ',
                                                    callback_data=f'del_window.{excursion_id}')
        back_btn = types.InlineKeyboardButton(text='–ö —Å–ø–∏—Å–∫—É —ç–∫—Å–∫—É—Ä—Å–∏–π', callback_data=f'back')
        keyboard.add(edit_excursion_btn, add_window_btn, del_window_btn, back_btn)
        bot.edit_message_text(text, call.message.chat.id, call.message.id, reply_markup=keyboard)
    elif 'window_admin' in call.data:
        text = f'–≠–∫—Å–∫—É—Ä—Å–∏—è'
        text += '–û–ø–∏—Å–∞–Ω–∏–µ'
        text += '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
        if '–∫—Ç–æ-—Ç–æ —É–∂–µ –∑–∞–ø–∏—Å–∞–ª—Å—è':
            text += '–î–∞—Ç–∞'
            text += '–°—Å—ã–ª–∫–∞'
            text += '–ö–∞–∫ –∑–æ–≤—É—Ç —Å–∫–æ–ª—å–∫–æ –∏—Ö'
            back_btn = types.InlineKeyboardButton(text='–ö —Å–ø–∏—Å–∫—É —ç–∫—Å–∫—É—Ä—Å–∏–π', callback_data=f'back')
        else:
            window_id = call.data.split('.')[1]
            edit_window_btn = types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                                                            callback_data=f'edit_excursion.{excursion_id}')
            del_window_btn = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –æ–∫–Ω–æ',
                                                        callback_data=f'del_window.{excursion_id}')


bot.infinity_polling()