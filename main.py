import telebot
from telebot import types
from typing import Dict
from time import sleep
from db_functions import *
from users_states import UserCache
from keyboard_markups import my_markups
from db_config_reader import read_config
from datetime import datetime

API_TOKEN = read_config(filename='config.ini', section='api')['key']
name_tg = '@hist_museum_bot'
bot = telebot.TeleBot(API_TOKEN)
session, _ = database_init()
admins_dict = get_admins_ids_names_dict(session)
admin_on_duty_tg_id = get_admin_id_by_name(session, '–ì–ª–µ–±')
users_cache_dict: Dict[int, UserCache] = {}
menu_buttons_text = my_markups.get_buttons_text()

### –∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - —Ç–µ—Å—Ç!

@bot.message_handler(content_types=['text'])
def work(message):
    if message.text == '/start' and message.from_user.id in admins_dict:
        text = f'–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admins_dict[message.from_user.id]}! –ö–ª–∏–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—èüëã\n–ß—Ç–æ-—Ç–æ –Ω—É–∂–Ω–æ?'
        bot.send_photo(message.chat.id, open('menu.jpg', 'rb'), caption=text)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é: üëá', reply_markup=my_markups.get_admin_menu())

    elif message.text == '/start':
        text = '–ü—Ä–∏–≤–µ—Ç! üëã –Ø - –ö–ª–∏–æ! –Ø –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –º—É–∑–µ—è —à–∫–æ–ª—ã ‚Ññ13.'
        bot.send_photo(message.chat.id, open('menu.jpg', 'rb'), caption=text)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é: üëá', reply_markup=my_markups.get_user_menu())

    elif message.text == my_markups.about_museum_btn.text:
        text = '–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π —à–∫–æ–ª—ã ‚Ññ13 —Å–æ–∑–¥–∞–Ω –≤ 2021 –≥–æ–¥—É. –°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ ‚Ññ20557 –ú—É–∑–µ–π –∏–º–µ–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å, ' \
               '–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –®–∫–æ–ª—å–Ω—ã—Ö –º—É–∑–µ–µ–≤ –∏ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å –®–∫–æ–ª—å–Ω–æ–≥–æ –ú—É–∑–µ—è –ü–æ–±–µ–¥—ã.\n–¢–∞–∫–∂–µ –º—ã —è–≤–ª—è–µ–º—Å—è' \
               ' –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ —à–∫–æ–ª—å–Ω—ã—Ö –º—É–∑–µ–µ–≤ "–®–∫–æ–ª—å–Ω—ã–π –º—É–∑–µ–π - –≤–∑–≥–ª—è–¥ –≤ –±—É–¥—É—â–µ–µ".\n–ù–∞—à –º—É–∑–µ–π ' \
               '—Å–æ–≤—Å–µ–º –º–æ–ª–æ–¥–æ–π, –ø–æ—ç—Ç–æ–º—É –æ–∂–∏–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –æ–±–∑–æ—Ä–æ–≤ –∏ ' \
               '—É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–∫—Å–∫—É—Ä—Å–∏–π - —ç—Ç–æ –ø—Ä–æ –Ω–∞—Å!'
        bot.send_message(message.chat.id, text)

    elif message.text == my_markups.about_bot_btn.text:
        text = "–ò–º—è –ö–ª–∏–æ —è –ø–æ–ª—É—á–∏–ª –≤ —á–µ—Å—Ç—å –º—É–∑—ã –∏—Å—Ç–æ—Ä–∏–∏ –≤ –¥—Ä–µ–≤–Ω–µ–≥—Ä–µ—á–µ—Å–∫–æ–π –º–∏—Ñ–æ–ª–æ–≥–∏–∏."
        bot.send_message(message.chat.id, text)

    elif message.text == my_markups.about_team_btn.text:
        text = ("–ù–∞—à –º—É–∑–µ–π–Ω—ã–π –∞–∫—Ç–∏–≤ - —É–≤–ª–µ—á–µ–Ω–Ω—ã–µ, –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–±—è—Ç–∞! –ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å! –ë–µ–∫–µ—Ç–æ–≤–∞ –í–ª–∞–¥–∞, "
                "–ò–≤–∞—â–µ–Ω–∫–æ –õ–∏–∑–∞, –ú–æ—Å–∏–Ω–∞ –í–∏–∫–∞, –ö–æ–Ω–¥—Ä–∞—à–æ–≤ –ü–∞—à–∞, –ë–µ—Å—Å—É–¥–Ω–æ–≤ –ê—Ä—Ç—ë–º, –ö–æ—Ü–µ–±—É–∫ –ù–∞—Å—Ç—è, –°–∏–Ω–∏—Ü–∞ –õ–µ—Ä–∞, "
                "–ê—Ä—Å–µ–Ω–∏–π –Æ–¥–∏–Ω - —ç–∫—Å–∫—É—Ä—Å–æ–≤–æ–¥—ã –∏ –∞–∫—Ç–∏–≤–∏—Å—Ç—ã –º—É–∑–µ—è.")
        bot.send_message(message.chat.id, text)

    elif message.text == my_markups.about_excursions_btn.text:
        keyboard = types.InlineKeyboardMarkup()
        callback_button = types.InlineKeyboardButton(text="üìù–ó–∞–ø–∏—Å—å –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é", callback_data='user_excursion_info')
        keyboard.add(callback_button)
        text = ("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é –º–æ–∂–Ω–æ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ 301 –Ω–∞ —Ç—Ä–µ—Ç—å–µ–º —ç—Ç–∞–∂–µ –∏–ª–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. "
                "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å!")
        bot.send_message(message.chat.id, text=text, reply_markup=keyboard)

    elif message.text == my_markups.edit_excursion_btn.text:
        keyboard = types.InlineKeyboardMarkup()
        excursions = get_all_excursions(session)
        for i, excursion in enumerate(excursions):
            callback_button = types.InlineKeyboardButton(text=excursion.title, callback_data=f'excursion_admin.{excursion.id}')
            keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–∏–¥ —ç–∫—Å–∫—É—Ä—Å–∏–∏', callback_data=f'excursion_admin.add')
        keyboard.add(callback_button)
        bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∫–∞–∑–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏: üëá",
                         reply_markup=keyboard)

    elif message.text == my_markups.edit_timetable_btn.text:
        keyboard = types.InlineKeyboardMarkup()
        windows = sorted(get_all_current_windows(session), key=lambda window: window.date_time)
        for i, window in enumerate(windows):
            if len(window.title) > 35:
                text = window.title[:35] + '... ' + window.date_time.strftime('%d.%m.%Y %H:%M')
            else:
                text = window.title + ' ' + window.date_time.strftime('%d.%m.%Y %H:%M')
            if window.contact_link:
                text = '‚úÖ' + text
            else:
                text = '‚òëÔ∏è' + text
            callback_button = types.InlineKeyboardButton(text=text, callback_data=f'window_admin.{window.id}')
            keyboard.add(callback_button)
        bot.send_message(message.chat.id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–∫–∞–∑–∞–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: üëá",
                         reply_markup=keyboard)

    else:
        bot.send_message(message.chat.id, "–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@bot.callback_query_handler(func=lambda call: 'user' in call.data)
def user_choosing_excursion_window(call):
    if call.data == 'user_excursion_info':
        excursion_ids_and_names = sorted(list(get_current_excursions_ids_and_names(session)), key=lambda x: x[1])
        keyboard = types.InlineKeyboardMarkup()
        for i, id_and_name in enumerate(excursion_ids_and_names):
            callback_button = types.InlineKeyboardButton(text=id_and_name[1],
                                                         callback_data=f'user_excursion_choice.{id_and_name[0]}')
            keyboard.add(callback_button)
        bot.edit_message_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏: üëá",
                              call.message.chat.id, call.message.id, reply_markup=keyboard)
    # –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é –≤—ã–≤–∞–ª–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã
    elif call.data.startswith('user_excursion_choice'):
        excursion_id = int(call.data.split('.')[1])
        excursion_info = get_excursion_info_by_id(session, excursion_id) # title, description, duration
        windows_ids_and_dates = [(x[0], x[1].strftime("%d.%m.%Y %H:%M")) for x in
                                 sorted(get_windows_ids_and_dates_by_excursion_id(session, excursion_id),
                                        key=lambda x: x[1])]
        keyboard = types.InlineKeyboardMarkup()
        for i, window_id_and_date in enumerate(windows_ids_and_dates):
            callback_button = types.InlineKeyboardButton(text=window_id_and_date[1],
                                                         callback_data=f'user_date_choice.{window_id_and_date[0]}')
            keyboard.add(callback_button)
        callback_button = types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —ç–∫—Å–∫—É—Ä—Å–∏–∏',
                                                     callback_data='user_excursion_info')
        keyboard.add(callback_button)
        text = ''
        text += excursion_info[0] + '\n'
        text += excursion_info[1] + '\n'
        text += '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ' + excursion_info[2] + '–º–∏–Ω.\n'
        text += "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞—Ç—ã: üëá"
        bot.edit_message_text(text, call.message.chat.id, call.message.id, reply_markup=keyboard)

    # –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ register_next_step_handler, —É—Ç–æ—á–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏
    elif call.data.startswith('user_date_choice'):
        users_cache_dict[call.message.chat.id] = UserCache(datetime.now())
        users_cache_dict[call.message.chat.id].window_id = int(call.data.split('.')[1])
        text = '–ö–∞–∫ –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å? (—É–∫–∞–∂–∏—Ç–µ –∏–º—è)'
        bot.send_message(call.message.chat.id, text)
        bot.register_next_step_handler(call.message, how_many)


@bot.message_handler(content_types=['text'])
def how_many(message):
    if message.text in menu_buttons_text:
        text = '–û—Å—É—â–µ—Å—Ç–≤–ª—è—é –≤–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω.'
        bot.send_message(message.chat.id, text)
        return work(message)
    users_cache_dict[message.chat.id].contact_name = message.text
    users_cache_dict[message.chat.id].contact_link = message.from_user.username
    text = "–°–∫–æ–ª—å–∫–æ –≤–∞—Å?"
    bot.send_message(message.chat.id, text)
    bot.register_next_step_handler(message, confirm_new_visit)


@bot.message_handler(content_types=['text'])
def confirm_new_visit(message):
    if message.text in menu_buttons_text:
        text = '–û—Å—É—â–µ—Å—Ç–≤–ª—è—é –≤–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω.'
        bot.send_message(message.chat.id, text)
        return work(message)
    info = [users_cache_dict[message.chat.id].window_id, users_cache_dict[message.chat.id].contact_link,
            users_cache_dict[message.chat.id].contact_name, message.text]
    # –æ–∂–∏–¥–∞–µ–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: —Å–µ—Å—Å–∏—è –∏ [window_id, contact_link, contact_name, umber]
    # –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–∫–Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    result = add_visit_into_window(session, info)
    if result:
        text = (f'üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã, {result.contact_name}, —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã '
                f'–Ω–∞ {result.date_time.strftime("%d.%m.%Y %H:%M")} –Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏—é!.\n'
                f'–ú–æ—è –∫–æ–º–∞–Ω–¥–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è')
        # bot.send_message(admin_on_duty_tg_id, '–ö—Ä—è!!!')
    else:
        text = '‚ùå–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É '
    bot.send_message(message.chat.id, text=text)


@bot.callback_query_handler(func=lambda call: 'admin' in call.data)
def admin_functions_entry(call):
    if 'excursion_admin' in call.data:
        if 'add' in call.data:
            text = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —ç–∫—Å–∫—É—Ä—Å–∏–∏'
            bot.send_message(call.message.chat.id, text)
            bot.register_next_step_handler(call.message, new_excursion_ask_description)
            return
        excursion_id = int(call.data.split('.')[1])
        excursion_info_list = get_excursion_info_by_id(session, excursion_id)
        text = f'–≠–∫—Å–∫—É—Ä—Å–∏—è: {excursion_info_list[0]}.\n'
        text += f'–û–ø–∏—Å–∞–Ω–∏–µ: {excursion_info_list[1]}\n'
        text += f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {excursion_info_list[2]} –º–∏–Ω.\n'
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        edit_excursion_btn = types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é',
                                                        callback_data=f'edit_excursion.{excursion_id}')
        del_excursion_btn = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é',
                                                        callback_data=f'del_excursion.{excursion_id}')
        add_window_btn = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –æ–∫–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
                                                    callback_data=f'add_window.{excursion_id}')
        keyboard.add(edit_excursion_btn, del_excursion_btn, add_window_btn)
        bot.send_message(call.message.chat.id, text, reply_markup=keyboard)
    elif 'window_admin' in call.data:
        window_id = int(call.data.split('.')[1])
        # -> [title, description, duration, date_time, contact_link, contact_name, visitors]
        window_info = get_window_info_by_id(session, window_id)
        text = f'{window_info[0]}\n'
        text += f'–û–ø–∏—Å–∞–Ω–∏–µ. {window_info[1]}\n'
        text += f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {window_info[2]} –º–∏–Ω.\n'
        text += f'{window_info[3].strftime("%d.%m.%Y %H:%M")}\n'
        if window_info[4]:
            text += f'–°—Å—ã–ª–∫–∞: {window_info[4]}\n'
            text += f'{window_info[5]}\n'
            text += f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {window_info[6]}\n'
        keyboard = types.InlineKeyboardMarkup()

        edit_window_btn = types.InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É',
                                                        callback_data=f'edit_window.{window_id}')
        del_window_btn = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é',
                                                     callback_data=f'del_window.{window_id}')
        keyboard.add(edit_window_btn, del_window_btn)
        bot.edit_message_text(text, call.message.chat.id, call.message.id, reply_markup=keyboard)


@bot.message_handler(content_types=['text'])
def new_excursion_ask_description(message):
    if message.text in menu_buttons_text:
        text = '–û—Å—É—â–µ—Å—Ç–≤–ª—è—é –≤–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω.'
        bot.send_message(message.chat.id, text)
        return work(message)
    temp = [message.text]
    text = '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ'
    bot.send_message(message.chat.id, text)
    bot.register_next_step_handler(message, new_excursion_ask_duration, temp)

@bot.message_handler(content_types=['text'])
def new_excursion_ask_duration(message, temp):
    if message.text in menu_buttons_text:
        text = '–û—Å—É—â–µ—Å—Ç–≤–ª—è—é –≤–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω.'
        bot.send_message(message.chat.id, text)
        return work(message)
    temp.append(message.text)
    text = '–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ)'
    bot.send_message(message.chat.id, text)
    bot.register_next_step_handler(message, new_excursion_final, temp)

@bot.message_handler(content_types=['text'])
def new_excursion_final(message, temp):
    if message.text in menu_buttons_text:
        text = '–û—Å—É—â–µ—Å—Ç–≤–ª—è—é –≤–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω.'
        bot.send_message(message.chat.id, text)
        return work(message)
    temp.append(message.text)
    res = add_excursion(session, temp)
    if res:
        bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
    else:
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


@bot.callback_query_handler(func=lambda call: 'edit_excursion' in call.data)
def edit_excursion_question(call):
    topic, excursion_id = call.data.split('.')
    excursion_id = int(excursion_id)
    if topic == 'edit_excursion':
        text = '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?'
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        title_excursion_btn = types.InlineKeyboardButton(text='–ù–∞–∑–≤–∞–Ω–∏–µ',
                                                        callback_data=f'edit_excursion_title.{excursion_id}')
        description_excursion_btn = types.InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ',
                                                       callback_data=f'edit_excursion_description.{excursion_id}')
        duration_excursion_btn = types.InlineKeyboardButton(text='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                                                    callback_data=f'edit_excursion_duration.{excursion_id}')
        keyboard.add(title_excursion_btn, description_excursion_btn, duration_excursion_btn)
        bot.edit_message_text(text, call.message.chat.id, call.message.id, reply_markup=keyboard)
    elif topic == 'edit_excursion_title':
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:'
        bot.send_message(call.message.chat.id, text=text)
        bot.register_next_step_handler(call.message, edit_excursion_finish, 'title', excursion_id)
    elif topic == 'edit_excursion_description':
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:'
        bot.send_message(call.message.chat.id, text=text)
        bot.register_next_step_handler(call.message, edit_excursion_finish, 'description', excursion_id)
    elif topic == 'edit_excursion_duration':
        text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):'
        bot.send_message(call.message.chat.id, text=text)
        bot.register_next_step_handler(call.message, edit_excursion_finish, 'duration', excursion_id)


@bot.message_handler(content_types=['text'])
def edit_excursion_finish(message, attribute_type, excursion_id):
    if message.text in menu_buttons_text:
        text = '–û—Å—É—â–µ—Å—Ç–≤–ª—è—é –≤–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω.'
        bot.send_message(message.chat.id, text)
        return work(message)
    res = update_excursion_by_id(session, excursion_id, attribute_type, message)
    if res:
        bot.send_message(message.chat.id, text='–ó–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    else:
        bot.send_message(message.chat.id, text='–û—à–∏–±–∫–∞')


@bot.callback_query_handler(func=lambda call: 'del_excursion' in call.data)
def del_excursion_question(call):
    excursion_id = call.data.split('.')[1]
    keyboard = types.InlineKeyboardMarkup()
    yes_btn = types.InlineKeyboardButton(text='–î–∞', callback_data=f'yes_del_e.{excursion_id}')
    no_btn = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data=f'no_del_e.{excursion_id}')
    keyboard.add(yes_btn, no_btn)
    bot.send_message(call.message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: 'yes_del_e' in call.data or 'no_del_e' in call.data)
def del_excursion_confirm(call):
    if 'yes' in call.data:
        excursion_id = call.data.split('.')[1]
        res = del_excursion(session, excursion_id)
        if res:
            bot.send_message(call.message.chat.id, '–≠–∫—Å–∫—É—Ä—Å–∏—è —É–¥–∞–ª–µ–Ω–∞')
        else:
            bot.send_message(call.message.chat.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞')
    else:
        bot.send_message(call.message.chat.id, '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')


@bot.callback_query_handler(func=lambda call: 'add_window' in call.data)
def adding_new_window_question(call):
    excursion_id = call.data.split('.')[1]
    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥')
    bot.register_next_step_handler(call.message, adding_new_window_final, excursion_id)

@bot.message_handler(content_types=['text'])
def adding_new_window_final(message, excursion_id):
    if message.text in menu_buttons_text:
        text = '–û—Å—É—â–µ—Å—Ç–≤–ª—è—é –≤–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω.'
        bot.send_message(message.chat.id, text)
        return work(message)
    if (t := check_date(message.text)) != 'ok':
        bot.send_message(message.chat.id, t)
        return
    res = add_window(session, excursion_id, message.text)
    if res:
        bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ "–æ–∫–æ—à–∫–æ"!')
    else:
        bot.send_message(message.chat.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞!')

@bot.callback_query_handler(func=lambda call: 'edit_window' in call.data)
def edit_window_date_question(call):
    topic, window_id = call.data.split('.')
    window_id = int(window_id)
    text = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:'
    bot.send_message(call.message.chat.id, text=text)
    bot.register_next_step_handler(call.message, edit_window_date_finish, 'date', window_id)


@bot.message_handler(content_types=['text'])
def edit_window_date_finish(message, attribute_type, window_id):
    if message.text in menu_buttons_text:
        text = '–û—Å—É—â–µ—Å—Ç–≤–ª—è—é –≤–æ–∑–≤—Ä–∞—Ç –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω.'
        bot.send_message(message.chat.id, text)
        return work(message)
    res = update_window_by_id(session, window_id, attribute_type, message)
    if res:
        bot.send_message(message.chat.id, text='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    else:
        bot.send_message(message.chat.id, text='–û—à–∏–±–∫–∞')

@bot.callback_query_handler(func=lambda call: 'del_window' in call.data)
def del_window_question(call):
    window_id = int(call.message.text.split('.')[1])
    keyboard = types.InlineKeyboardMarkup()
    yes_btn = types.InlineKeyboardButton(text='–î–∞', callback_data=f'yes_del_w.{window_id}')
    no_btn = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data=f'no_del_w.{window_id}')
    keyboard.add(yes_btn, no_btn)
    bot.send_message(call.message.chat.id, '–í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: 'yes_del_w' in call.data or 'no_del_w' in call.data)
def del_excursion_confirm(call):
    if 'yes' in call.data:
        excursion_id = call.data.split('.')[1]
        res = del_excursion(session, excursion_id)
        if res:
            bot.send_message(call.message.chat.id, '–≠–∫—Å–∫—É—Ä—Å–∏—è —É–¥–∞–ª–µ–Ω–∞')
        else:
            bot.send_message(call.message.chat.id, '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞')
    else:
        bot.send_message(call.message.chat.id, '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')

while True:
    try:
        bot.polling(none_stop=True)
    except Exception as _ex:
        print(_ex)
        sleep(15)